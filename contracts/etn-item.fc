#include "imports/stdlib.fc";
#include "imports/op-codes.fc";

;; ================= STORAGE ==================
;; (item_index, collection_address, owner_address, content)
(int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(256),    ;; item_index (256-bit hash)
        ds~load_msg_addr(),   ;; collection_address
        ds~load_msg_addr(),   ;; owner_address
        ds~load_ref()         ;; content
    );
}

() save_data(int item_index, slice collection_address, slice owner_address, cell content) impure inline {
    set_data(
        begin_cell()
          .store_uint(item_index, 256)
          .store_slice(collection_address)
          .store_slice(owner_address)
          .store_ref(content)
       .end_cell()
    );
}

;; ================= MAIN =====================
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    var (item_index, collection_address, owner_address, content) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer) {
        throw_unless(401, equal_slices(sender_address, owner_address));

        slice new_owner_address = in_msg_body~load_msg_addr();
        slice response_destination = in_msg_body~load_msg_addr();
        in_msg_body~load_int(1); ;; custom_payload
        int forward_amount = in_msg_body~load_coins();
        cell forward_payload = in_msg_body~load_ref();

        save_data(item_index, collection_address, new_owner_address, content);

        if (forward_amount > 0) {
            var msg = begin_cell()
               .store_uint(0x18, 6)
               .store_slice(new_owner_address)
               .store_coins(forward_amount)
               .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
               .store_uint(op::ownership_assigned, 32)
               .store_uint(query_id, 64)
               .store_slice(owner_address)
               .store_ref(forward_payload);
            send_raw_message(msg.end_cell(), 64); ;; mode 64: pay fees separately, send remaining value
        }

        if (response_destination.preload_uint(2)!= 0) {
            var resp_msg = begin_cell()
               .store_uint(0x10, 6)
               .store_slice(response_destination)
               .store_grams(0)
               .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
               .store_uint(op::excesses, 32)
               .store_uint(query_id, 64);
            send_raw_message(resp_msg.end_cell(), 64);
        }
        return ();
    }

    throw(0xffff); ;; Unknown op
}

;; ================= GET-METHODS ==================
(int, int, slice, slice, cell) get_nft_data() method_id {
    var (item_index, collection_address, owner_address, content) = load_data();
    return (-1, item_index, collection_address, owner_address, content); ;; -1 for init? flag, indicating it is active
}
