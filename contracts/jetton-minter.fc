#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/jetton-op-codes.fc";
#include "imports/utils.fc";

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure {
  set_data(begin_cell()
    .store_coins(total_supply)
    .store_slice(admin_address)
    .store_ref(content)
    .store_ref(jetton_wallet_code)
    .end_cell()
  );
}

(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_coins(), ds~load_msg_addr(), ds~load_ref(), ds~load_ref());
}

() deploy_jetton_wallet(slice owner_address, slice master_address, cell jetton_wallet_code) impure {
  cell state_init = calculate_jetton_wallet_state_init(owner_address, master_address, jetton_wallet_code);
  slice wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(state_init);
  send_raw_message(msg.end_cell(), 64);
}

() mint_tokens(slice to_address, int jetton_amount, cell master_msg) impure {
  var (total_supply, admin_address, content, jetton_wallet_code) = load_data();
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 64);
  save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  var (total_supply, admin_address, content, jetton_wallet_code) = load_data();

  if (op == op::mint) {
    throw_unless(error::access_denied, equal_slices(sender_address, admin_address));
    slice to_address = in_msg_body~load_msg_addr();
    int jetton_amount = in_msg_body~load_coins();
    cell master_msg = in_msg_body~load_ref();
    mint_tokens(to_address, jetton_amount, master_msg);
    return ();
  }

  if (op == op::burn_notification) {
    ;; handle burn notification
    return ();
  }

  throw(error::unknown_op);
}

(int, slice, cell) get_jetton_data() method_id {
  var (total_supply, admin_address, content, jetton_wallet_code) = load_data();
  return (total_supply, admin_address, content);
}

slice get_wallet_address(slice owner_address) method_id {
  var (_, _, _, jetton_wallet_code) = load_data();
  cell state_init = calculate_jetton_wallet_state_init(owner_address, my_address(), jetton_wallet_code);
  return calculate_jetton_wallet_address(state_init);
}
